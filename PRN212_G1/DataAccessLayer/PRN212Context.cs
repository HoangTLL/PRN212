// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DataAccessLayer;

public partial class PRN212Context : DbContext
{
    private readonly string _connectionString;
    public PRN212Context(DbContextOptions<PRN212Context> options)
        : base(options)
    {
    }
    public PRN212Context()
    {
        _connectionString = GetConnectionString();
    }
    private string GetConnectionString()
    {
        try
        {
            IConfiguration configuration = new ConfigurationBuilder()
                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .Build();

            var connectionString = configuration.GetConnectionString("DefaultConnectionString");
            if (string.IsNullOrEmpty(connectionString))
            {
                throw new InvalidOperationException("Connection string 'DefaultConnectionString' not found in appsettings.json");
            }
            return connectionString;
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Error reading connection string: {ex.Message}");
        }
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        try
        {
            if (!optionsBuilder.IsConfigured)
            {
                var connectionString = !string.IsNullOrEmpty(_connectionString)
                    ? _connectionString
                    : GetConnectionString();

                optionsBuilder.UseSqlServer(connectionString);
            }
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Error configuring database context: {ex.Message}");
        }
    }
    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Trip> Trips { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Booking__3214EC079B5BEF43");

            entity.ToTable("Booking");

            entity.HasOne(d => d.Trip).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.TripId)
                .HasConstraintName("FK__Booking__TripId__29572725");

            entity.HasOne(d => d.User).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Booking__UserId__286302EC");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Location__3214EC076628A1E9");

            entity.ToTable("Location");

            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<Trip>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Trip__3214EC076E3EB393");

            entity.ToTable("Trip");

            entity.Property(e => e.DropOffLocationId).HasColumnName("dropOffLocationId");
            entity.Property(e => e.PickUpLocationId).HasColumnName("pickUpLocationId");

            entity.HasOne(d => d.DropOffLocation).WithMany(p => p.TripDropOffLocations)
                .HasForeignKey(d => d.DropOffLocationId)
                .HasConstraintName("FK_Trip_dropOffLocation");

            entity.HasOne(d => d.PickUpLocation).WithMany(p => p.TripPickUpLocations)
                .HasForeignKey(d => d.PickUpLocationId)
                .HasConstraintName("FK_Trip_pickUpLocation");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3214EC076D755341");

            entity.ToTable("User");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(255);
            entity.Property(e => e.Role).HasMaxLength(255);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}